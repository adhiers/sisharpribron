// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using sisharpriborn.BO;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

namespace sisharpriborn.DAL;

public partial class FinalProjectContext : IdentityDbContext //DbContext
{
    public FinalProjectContext(DbContextOptions<FinalProjectContext> options)
        : base(options)
    {
    }

    public FinalProjectContext()
    {

    }

    public virtual DbSet<Agreement> Agreements { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<ConsultHistory> ConsultHistories { get; set; }

    public virtual DbSet<Credit> Credits { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Dealer> Dealers { get; set; }

    public virtual DbSet<DealerCarList> DealerCarLists { get; set; }

    public virtual DbSet<LetterOfIntent> LetterOfIntents { get; set; }

    public virtual DbSet<OtherBenefit> OtherBenefits { get; set; }

    public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }

    public virtual DbSet<SalesPerson> SalesPeople { get; set; }

    public virtual DbSet<TestDriveNego> TestDriveNegos { get; set; }

    public virtual DbSet<Warranty> Warranties { get; set; }

    public virtual DbSet<WarrantyClaim> WarrantyClaims { get; set; }

    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //{
    //    base.OnConfiguring(optionsBuilder);
    //    if (!optionsBuilder.IsConfigured)
    //    {
    //        optionsBuilder.UseSqlServer("Data Source=.\\;Initial Catalog=FinalProjectRilil;User ID=sa;Password=Laripagisql65;TrustServerCertificate=True");
    //    }
    //}

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Agreement>(entity =>
        {
            entity.HasKey(e => e.AgreementId).HasName("PK__Agreemen__0A3082C37867AFCC");

            entity.ToTable("Agreement");

            entity.HasIndex(e => e.Loiid, "UQ__Agreemen__E21E1B4DF45B50CA").IsUnique();

            entity.HasIndex(e => e.CreditId, "UQ__Agreemen__ED5ED0BAA96CB6AE").IsUnique();

            entity.Property(e => e.AgreementId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreditId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerCarId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Loiid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LOIId");
            
            entity.Property(e => e.MethodPayment)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Credit).WithOne(p => p.Agreement)
                .HasForeignKey<Agreement>(d => d.CreditId)
                .HasConstraintName("FK__Agreement__Credi__79C80F94");

            entity.HasOne(d => d.Customer).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Custo__78D3EB5B");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Deale__7CA47C3F");

            entity.HasOne(d => d.Loi).WithOne(p => p.Agreement)
                .HasForeignKey<Agreement>(d => d.Loiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__LOIId__7ABC33CD");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Sales__7BB05806");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarId).HasName("PK__Car__68A0342E76DD1CAA");

            entity.ToTable("Car");

            entity.HasIndex(e => e.VIN, "UQ__Car__C5DF234C36F8E37B").IsUnique();

            entity.Property(e => e.CarId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FuelType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModelType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VIN)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VIN");
        });

        modelBuilder.Entity<ConsultHistory>(entity =>
        {
            entity.HasKey(e => e.ConsultId).HasName("PK__ConsultH__28859B358E08874E");

            entity.ToTable("ConsultHistory");

            entity.Property(e => e.ConsultId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.SalesPersonId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Custo__67A95F59");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Sales__689D8392");
        });

        modelBuilder.Entity<Credit>(entity =>
        {
            entity.HasKey(e => e.CreditId).HasName("PK__Credit__ED5ED0BB4B8EF0CC");

            entity.ToTable("Credit");

            entity.Property(e => e.CreditId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StatusCredit)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.Credits)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Credit__Customer__740F363E");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64D80FC9D307");

            entity.ToTable("Customer");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdCardNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Dealer>(entity =>
        {
            entity.HasKey(e => e.DealerId).HasName("PK__Dealer__CA2F8EB2DFA14A30");

            entity.ToTable("Dealer");

            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerAddress)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DealerCarList>(entity =>
        {
            entity.HasKey(e => e.DealerCarId).HasName("PK__DealerCa__7DD0B58628B0B455");

            entity.ToTable("DealerCarList");

            entity.Property(e => e.DealerCarId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CarId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Car).WithMany(p => p.DealerCarLists)
                .HasForeignKey(d => d.CarId)
                .HasConstraintName("FK__DealerCar__CarId__63D8CE75");

            entity.HasOne(d => d.Dealer).WithMany(p => p.DealerCarLists)
                .HasForeignKey(d => d.DealerId)
                .HasConstraintName("FK__DealerCar__Deale__64CCF2AE");
        });

        modelBuilder.Entity<LetterOfIntent>(entity =>
        {
            entity.HasKey(e => e.Loiid).HasName("PK__LetterOf__E21E1B4C6C1B14CA");

            entity.ToTable("LetterOfIntent");

            entity.Property(e => e.Loiid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LOIId");
            entity.Property(e => e.DealerCarId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.DealerCar).WithMany(p => p.LetterOfIntents)
                .HasForeignKey(d => d.DealerCarId)
                .HasConstraintName("FK__LetterOfI__Deale__7132C993");
        });

        modelBuilder.Entity<OtherBenefit>(entity =>
        {
            entity.HasKey(e => e.AgreementId).HasName("PK__OtherBen__0A3082C35A0C6F68");

            entity.ToTable("OtherBenefit");

            entity.Property(e => e.AgreementId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Benefit).HasColumnType("text");

            entity.HasOne(d => d.Agreement).WithOne(p => p.OtherBenefit)
                .HasForeignKey<OtherBenefit>(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OtherBene__Agree__025D5595");
        });

        modelBuilder.Entity<PaymentHistory>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__PaymentH__9B556A383622A597");

            entity.ToTable("PaymentHistory");

            entity.Property(e => e.PaymentId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AgreementId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Agreement).WithMany(p => p.PaymentHistories)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentHi__Agree__7F80E8EA");
        });

        modelBuilder.Entity<SalesPerson>(entity =>
        {
            entity.HasKey(e => e.SalesPersonId).HasName("PK__SalesPer__7A591C38E80E52F0");

            entity.ToTable("SalesPerson");

            entity.Property(e => e.SalesPersonId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesPeople)
                .HasForeignKey(d => d.DealerId)
                .HasConstraintName("FK__SalesPers__Deale__60FC61CA");
        });

        modelBuilder.Entity<TestDriveNego>(entity =>
        {
            entity.HasKey(e => e.Tdnid).HasName("PK__TestDriv__BC0D3AC587ECE0B2");

            entity.ToTable("TestDriveNego");

            entity.Property(e => e.Tdnid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TDNId");
            entity.Property(e => e.ConsultId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerCarId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.SalesPersonId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Tdndate).HasColumnName("TDNDate");

            entity.HasOne(d => d.Customer).WithMany(p => p.TestDriveNegos)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Custo__6B79F03D");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.TestDriveNegos)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Deale__6E565CE8");

            entity.HasOne(d => d.Dealer).WithMany(p => p.TestDriveNegos)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Deale__6C6E1476");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.TestDriveNegos)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Sales__6D6238AF");
        });

        modelBuilder.Entity<Warranty>(entity =>
        {
            entity.HasKey(e => e.WarrantyId).HasName("PK__Warranty__2ED31813F37CC3C4");

            entity.ToTable("Warranty");

            entity.HasIndex(e => e.AgreementId, "UQ__Warranty__0A3082C261A9FC44").IsUnique();

            entity.Property(e => e.WarrantyId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AgreementId)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Agreement).WithOne(p => p.Warranty)
                .HasForeignKey<Warranty>(d => d.AgreementId)
                .HasConstraintName("FK__Warranty__Agreem__062DE679");
        });

        modelBuilder.Entity<WarrantyClaim>(entity =>
        {
            entity.HasKey(e => e.ClaimId).HasName("PK__Warranty__EF2E139B66340F6A");

            entity.ToTable("WarrantyClaim");

            entity.Property(e => e.ClaimId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ServiceCenter)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarrantyId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Warranty).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.WarrantyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyC__Warra__090A5324");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}